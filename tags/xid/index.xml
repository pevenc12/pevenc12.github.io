<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>XID on blog.p</title><link>https://pevenc12.github.io/tags/xid/</link><description>Recent content in XID on blog.p</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><copyright>© Peven</copyright><lastBuildDate>Tue, 30 Nov 2021 22:03:55 +0800</lastBuildDate><atom:link href="https://pevenc12.github.io/tags/xid/index.xml" rel="self" type="application/rss+xml"/><item><title>PostgreSQL：垃圾回收機制 VACUUM</title><link>https://pevenc12.github.io/posts/postgresql-vacuum-introduction/</link><pubDate>Tue, 30 Nov 2021 22:03:55 +0800</pubDate><guid>https://pevenc12.github.io/posts/postgresql-vacuum-introduction/</guid><description>前陣子在工作上遇到了資料庫佔用太多空間所以要清理的情境，便順手研究了一下 PostgreSQL 內的垃圾回收機制—— VACUUM 。
為什麼需要垃圾回收 在討論為什麼要進行垃圾回收之前，要先介紹一下 PostgreSQL 內部實作的 MVCC（Multi Version Concurrency Control）機制：
資料庫內部有一個 counter ，負責發給每個 transaction 一個 transaction ID（XID），每次發完之後會將 counter 加一。在 transaction 內完成 create 、 update 、 delete 等行為後，會將該 XID 更新到每一筆有動到的 tuple 裡，如此讓資料也有版號。當其他 transaction 要觸碰這些被更動過的 tuple 時，就會拿著自己的 XID 去跟 tuple 上的 XID 做比較，如果自己的版號較新，就能完整讀到所有資料，反之如果自己的版號較舊，就會讀不到。
由此可知，被刪除的 tuple 不會馬上從資料庫內消失，而是會被註記於某個 XID 以後就再也讀不到。因此，資料庫必須進行垃圾回收才能釋放空間並重複利用。
VACUUM 機制 回收儲存空間 在 PostgreSQL 中，有兩種回收的行為： VACUUM 與 VACUUM FULL ，前者會將同一個 table 的空間回收並供該 table 繼續使用，並且在過程中並不會有使用到任何 lock 。後者則是會新建 table 並且將 tuples 重新寫入，過程中會使用 exclusive lock ，多餘的空間會釋出並還給作業系統。</description></item></channel></rss>